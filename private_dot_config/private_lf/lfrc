set dircounts
set info "size"
set icons
set mouse
set ifs "\n"
set previewer tp

# enter preview
map i $tp "$f" $(tput cols) $(tput lines) | less -R

# file opener
cmd open &{{
	mimetype=$(file --brief --dereference --mime-type $f)
	defapp=$(gio mime "$mimetype" | sed -n '1s/.*: //p')
	case "$defapp" in 
	nvim.desktop)
        lf -remote "send $id \$nvim $f"
		;;
	vim.desktop)
        lf -remote "send $id \$vim $f"
		;;
	*)
		gio open $fx
	esac
}}

# dynamic layout
cmd recol ${{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}
recol

# deleting and trashing
cmd trash %trash "$fx"

map D delete
map T trash


# put lf into background
map <c-z> $ kill -STOP $PPID

# execute current file (must be executable)
map x %$f
map X !$f

# create new file / folder
cmd enew ${{
	if [[ $1 =~ /$ ]]; then
		mkdir -p "$1"
	else
		$EDITOR "$1"
	fi
}}

map a push :enew<space>

# toggle show hidden file <C-H>
map <backspace> set hidden!

# zoxide cd
cmd z %{{
	result="$(zoxide query --exclude $PWD $@)"
	lf -remote "send $id cd $result"
}}
cmd zi ${{
	result="$(zoxide query -i)"
	lf -remote "send $id cd $result"
}}

map zz push :z<space>
map zi zi

# git
cmd git_branch ${{
    git branch | fzf | xargs git checkout
    pwd_shell=$(pwd)
    lf -remote "send $id updir"
    lf -remote "send $id cd \"$pwd_shell\""
}}
cmd on-cd &{{
    # display git repository status in your prompt
    source /usr/share/git/completion/git-prompt.sh
    GIT_PS1_SHOWDIRTYSTATE=auto
    GIT_PS1_SHOWSTASHSTATE=auto
    GIT_PS1_SHOWUNTRACKEDFILES=auto
    GIT_PS1_SHOWUPSTREAM=auto
    GIT_PS1_COMPRESSSPARSESTATE=auto
    git=$(__git_ps1 " [%s]") || true
    fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m$git\033[0m"
    lf -remote "send $id set promptfmt \"$fmt\""
}}

map gb :git_branch
map gp ${{clear; git pull --rebase || true; echo "press ENTER"; read ENTER}}
map gs ${{clear; git status; echo "press ENTER"; read ENTER}}
map gl ${{clear; git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit}}

on-cd
# FZF
cmd fzf_jump ${{
    res="$(fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}

map <c-f> :fzf_jump
map E $vi $(fzf)

# ripgrep
cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
map gs :fzf_search

# bulk rename
cmd bulkrename ${{
    vimv --git -- $(basename -a -- $fx)

    lf -remote "send $id load"
    lf -remote "send $id unselect"
}}
map R bulkrename

# share file
cmd share $curl -F"file=@$fx" https://0x0.st | wl-copy

map S share

# vi: ft=bash
